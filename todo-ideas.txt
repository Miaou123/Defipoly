Current focus:

Add shielding tracking in my backend (so ppl know if they can steal or not, added providers and propertystats for this, need to add it to the backend and store it properly etc): working (just need more test)

When shielding, even one property it shows the shield in modal but don't propose to shield more slots

show the steal option even when owning a property

Show the steal cooldown on the UI

Need to test the new full deploy system with deploy:full


Todo:
Work on security (backend / frontend / program)
Quests system
Add 3d scaling houses when clicking on the property menu
fix the disparition bug from claiming when it's updated from blockchain every 30 sec/ same for leaderboard
Instead of 25% sell scaling (ui not right yet)

show the number of unshielded slots

Add wss in addition to websockets? wss = 100%

To much helius API calls

When claiming reward need to instantly put it back to 0 (no keep counting until we check program for exact number)

Maybe add a system to adjust rewards depending on the rewards pool size (more tokens in reward pool mode rewards, less tokens less rewards)

Add blockchain checks call every X minutes to check for all backend data if its accurate (shield cooldown / steal cooldown / cooldowns etc) and give me warnings logs when there are disprecancies

Add system like addicted where people have to enter a code to play and then get 5 code etc

Give admin all rights (airdrop properties etc)

PDA changes:
Add the expand phase system for adding properties
Add an airdrop properties system for admin wallet (and other admins commands)
Steal system
Different family bonuses

Need to rethink prices etc because stealing would be too weak (need to add a cooldown to make sense but some users would already have 50+ of the property so it would be impossible to catch up)


padding tech for future update:

// VERSION 1
#[derive(BorshSerialize, BorshDeserialize)]
pub struct GlobalState {
    pub authority: Pubkey,
    // ... all your fields ...
    pub bump: u8,
    
    // Reserve space for future fields
    pub padding: [u8; 256],  // ‚Üê Add this
}

impl GlobalState {
    pub const LEN: usize = 543 + 256; // 799 bytes
}

ca c'est comment on fait normalement
sans le pu padding ni le +256 en dessous


// VERSION 2
pub struct GlobalState {
    pub authority: Pubkey,
    // ... existing fields ...
    pub bump: u8,
    
    // New fields (using 16 bytes from padding)
    pub new_feature: u64,      // 8 bytes
    pub another_feature: u64,  // 8 bytes
    
    pub padding: [u8; 240],    // 256 - 16 = 240 remaining
}

ta pu ajouter des fields et tout
dans le meme account
et ajouter 256 de padding ca coute 0.0001 sol quoi
oui sur ta v1 tu prevois le padding sur tous
et des fonctions withdraw et aussi modif de toutes les fields et tout
et apres oui tu peux vrmt tout changer tout upgrade tout quoi
demande lui en mode anchor ptet ouai
au moins voir comment ca secrit juste pour voir
du coup ouai en fait si tu fais fonction withdraw et modif de toutes fieldds et le padding le seul point que faut voir c'est tes pda
jai une fonction pause aussi ca resout le truc de pda de ce que je viens de dire en fait

check si j'ai les foncitons essencielles (pause / withdraw etc)